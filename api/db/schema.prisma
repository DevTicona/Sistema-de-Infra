generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Componente {
  id                   Int          @id(map: "componente_pk") @default(autoincrement())
  id_sistema           Int
  nombre               String       @db.VarChar(30)
  descripcion          String
  estado               estado
  entorno              entorno
  categoria            categoria
  fecha_creacion       DateTime     @default(now()) @map("_fecha_creacion") @db.Timestamptz(6)
  usuario_creacion     Int          @map("_usuario_creacion")
  fecha_modificacion   DateTime?    @map("_fecha_modificacion") @db.Timestamptz(6)
  usuario_modificacion Int?         @map("_usuario_modificacion")
  sistemas             Sistema      @relation(fields: [id_sistema], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sistema_id")
  despliegue           Despliegue[]

  @@map("componentes")
}

model Contenedorlogico {
  id                   Int                  @id(map: "contenedor_logico_pk") @default(autoincrement())
  codigo               String               @db.VarChar(10)
  nombre               String               @db.VarChar(50)
  descripcion          String
  tipo                 String               @db.VarChar(15)
  estado               estado
  respaldo             Json?
  fecha_creacion       DateTime             @default(now()) @map("_fecha_creacion") @db.Timestamptz(6)
  usuario_creacion     Int                  @map("_usuario_creacion")
  fecha_modificacion   DateTime?            @map("_fecha_modificacion") @db.Timestamptz(6)
  usuario_modificacion Int?                 @map("_usuario_modificacion")
  despliegue           Despliegue[]
  servidor_contenedor  Servidorcontenedor[]
  usuario_roles        Usuariorol[]

  @@map("contenedor_logico")
}

model Despliegue {
  id                   Int              @id(map: "despliegue_pk") @default(autoincrement())
  id_componente        Int?
  id_contenedor_logico Int
  sigla                String           @db.VarChar(15)
  nombre               String           @db.VarChar(50)
  descripcion          String
  tipo                 String           @db.VarChar(15)
  estado               estado
  respaldo             Json?
  fecha_creacion       DateTime         @default(now()) @map("_fecha_creacion") @db.Timestamptz(6)
  usuario_creacion     Int              @map("_usuario_creacion")
  fecha_modificacion   DateTime?        @map("_fecha_modificacion") @db.Timestamptz(6)
  usuario_modificacion Int?             @map("_usuario_modificacion")
  componentes          Componente?      @relation(fields: [id_componente], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_componente_id")
  contenedor_logico    Contenedorlogico @relation(fields: [id_contenedor_logico], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_contenedor_logico_2_id")

  @@map("despliegue")
}

model Entidad {
  id                   Int       @id(map: "entidades_pk") @default(autoincrement())
  codigo               String    @db.VarChar(10)
  sigla                String    @db.VarChar(15)
  nombre               String    @db.VarChar(150)
  estado               estado
  fecha_creacion       DateTime  @default(now()) @map("_fecha_creacion") @db.Timestamptz(6)
  usuario_creacion     Int       @map("_usuario_creacion")
  fecha_modificacion   DateTime? @map("_fecha_modificacion") @db.Timestamptz(6)
  usuario_modificacion Int?      @map("_usuario_modificacion")
  sistemas             Sistema[]

  @@map("entidades")
}

model Rol {
  id                   Int          @id(map: "roles_pk") @default(autoincrement())
  nombre               String       @db.VarChar(15)
  tipo                 String       @db.VarChar(15)
  estado               estado
  fecha_creacion       DateTime     @default(now()) @map("_fecha_creacion") @db.Timestamptz(6)
  usuario_creacion     Int          @map("_usuario_creacion")
  fecha_modificacion   DateTime?    @map("_fecha_modificacion") @db.Timestamptz(6)
  usuario_modificacion Int?         @map("_usuario_modificacion")
  usuario_roles        Usuariorol[]

  @@map("roles")
}

model Servidorcontenedor {
  id                   Int               @id(map: "servidor_contenedor_pk") @default(autoincrement())
  id_servidor          Int?
  id_contenedor_logico Int?
  sigla                String            @db.VarChar(15)
  nombre               String            @db.VarChar(50)
  descripcion          String
  tipo                 String            @db.VarChar(15)
  estado               estado
  respaldo             Json?
  fecha_creacion       DateTime          @default(now()) @map("_fecha_creacion") @db.Timestamptz(6)
  usuario_creacion     Int               @map("_usuario_creacion")
  fecha_modificacion   DateTime?         @map("_fecha_modificacion") @db.Timestamptz(6)
  usuario_modificacion Int?              @map("_usuario_modificacion")
  contenedor_logico    Contenedorlogico? @relation(fields: [id_contenedor_logico], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_contenedor_logico_id")
  servidores           Servidor?         @relation(fields: [id_servidor], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_servidor_id")

  @@map("servidor_contenedor")
}

model Servidor {
  id                   Int                  @id(map: "servidor_pk") @default(autoincrement())
  nro_cluster          Int
  vmid                 Int
  nombre               String               @db.VarChar(35)
  nodo                 String               @db.VarChar(20)
  ip                   String               @db.Inet
  tipo                 String               @db.VarChar(15)
  estado               estado
  metadata             Json?
  fecha_creacion       DateTime             @default(now()) @map("_fecha_creacion") @db.Timestamptz(6)
  usuario_creacion     Int                  @map("_usuario_creacion")
  fecha_modificacion   DateTime?            @map("_fecha_modificacion") @db.Timestamptz(6)
  usuario_modificacion Int?                 @map("_usuario_modificacion")
  servidor_contenedor  Servidorcontenedor[]

  @@map("servidores")
}

model Sistema {
  id                   Int          @id(map: "sistema_pk") @default(autoincrement())
  id_padre             Int?
  id_entidad           Int
  codigo               String       @db.VarChar(10)
  sigla                String       @db.VarChar(15)
  nombre               String       @db.VarChar(50)
  descripcion          String
  estado               estado
  respaldo_creacion    Json?
  fecha_creacion       DateTime     @default(now()) @map("_fecha_creacion") @db.Timestamptz(6)
  usuario_creacion     Int          @map("_usuario_creacion")
  fecha_modificacion   DateTime?    @map("_fecha_modificacion") @db.Timestamptz(6)
  usuario_modificacion Int?         @map("_usuario_modificacion")
  componentes          Componente[]
  entidades            Entidad      @relation(fields: [id_entidad], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_entidad_id")
  sistemas             Sistema?     @relation("sistemasTosistemas", fields: [id_padre], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sistema_padre_id")
  other_sistemas       Sistema[]    @relation("sistemasTosistemas")
  usuario_roles        Usuariorol[]

  @@map("sistemas")
}

model Usuariorol {
  id                   Int              @id(map: "usuario_roles_pk") @default(autoincrement())
  id_usuario           Int?
  id_rol               Int
  id_contenedor_logico Int
  id_sistema           Int
  descripcion          String
  tipo                 String           @db.VarChar(15)
  estado               estado
  respaldo             Json?
  fecha_creacion       DateTime         @default(now()) @map("_fecha_creacion") @db.Timestamptz(6)
  usuario_creacion     Int              @map("_usuario_creacion")
  fecha_modificacion   DateTime?        @map("_fecha_modificacion") @db.Timestamptz(6)
  usuario_modificacion Int?             @map("_usuario_modificacion")
  contenedor_logico    Contenedorlogico @relation(fields: [id_contenedor_logico], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_contenedor_logico_3_id")
  roles                Rol              @relation(fields: [id_rol], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rol_id")
  sistemas             Sistema          @relation(fields: [id_sistema], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sistema_2_id")
  usuarios             Usuario?         @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario_id")

  @@map("usuario_roles")
}

model Usuario {
  id                   Int          @id(map: "usuario_pk") @default(autoincrement())
  uuid_ciudadano       String?      @db.VarChar
  nombre_usuario       String       @db.VarChar(20)
  profile              Json
  telefono             Json
  correo_electronico   Json
  estado               estado
  fecha_creacion       DateTime     @default(now()) @map("_fecha_creacion") @db.Timestamptz(6)
  usuario_creacion     Int          @map("_usuario_creacion")
  fecha_modificacion   DateTime?    @map("_fecha_modificacion") @db.Timestamptz(6)
  usuario_modificacion Int?         @map("_usuario_modificacion")
  usuario_roles        Usuariorol[]

  @@map("usuarios")
}

enum categoria {
  Backend
  Frontend
  Database
  NFS

  @@map("categoria")
}

enum entorno {
  Demo
  PreProd
  Prod
  Test

  @@map("entorno")
}

enum estado {
  ACTIVO
  INACTIVO

  @@map("estado")
}

model User {
  id                  Int       @id @default(autoincrement())
  nombre              String?
  email               String    @unique
  hashedPassword      String    @default("")
  salt                String    @default("")
  resetToken          String?
  resetTokenExpiresAt DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  roles               String    @default("usuario")

  @@map("user")
}
